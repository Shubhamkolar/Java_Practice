                                                        4th PILLAR OF OOPS- POLYMORPHISM 

- Poly means "MANY" and morphism means "FORM". 
- A same method, behaves differently in different situtaion. 
- Example: 
    - A person can be father, husband, employee, etc. 
    - Water can be liquid, solid, and Gas, etc. 

- Types of Polymorphism: 
    - Compile Time/ Static Polymorphism/ Method Overloading
    - Run Time/ Dynamic Polymorphism/ Method Overriding 

-----------------------------------------------------------------------------------------------------------
| Type                          | Also Called     | Resolution Time | Example                             |
| ----------------------------- | --------------- | --------------- | ----------------------------------- |
|   Compile-Time Polymorphism   | Static Binding  | At compile time | Method Overloading                  |
|   Runtime Polymorphism        | Dynamic Binding | At runtime      | Method Overriding using Inheritance |
-----------------------------------------------------------------------------------------------------------

1. Compile-Time Polymorphism (Method Overloading)

- What is Method Overloading?
- It allows a class to have multiple methods with the same name but different parameters (number, type, or order).

class Calculator {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }

    int add(int a, int b, int c) {
        return a + b + c;
    }
}

public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        System.out.println(calc.add(2, 3));           // Output: 5
        System.out.println(calc.add(2.5, 3.5));       // Output: 6.0
        System.out.println(calc.add(1, 2, 3));        // Output: 6
    }
}


2. Runtime Polymorphism (Method Overriding)
- What is Method Overriding?
- When a subclass provides its own implementation of a method already defined in its superclass.

class Animal {
    void sound() {
        System.out.println("Animal makes sound");
    }
}

class Dog extends Animal {
    @Override
    void sound() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    @Override
    void sound() {
        System.out.println("Cat meows");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal a1 = new Dog(); // Polymorphism
        Animal a2 = new Cat(); // Polymorphism

        a1.sound();  // Output: Dog barks
        a2.sound();  // Output: Cat meows
    }
}


Polymorphism Using Interfaces:
interface Shape {
    void draw();
}

class Circle implements Shape {
    public void draw() {
        System.out.println("Drawing Circle");
    }
}

class Square implements Shape {
    public void draw() {
        System.out.println("Drawing Square");
    }
}

public class Main {
    public static void main(String[] args) {
        Shape s;

        s = new Circle(); // Polymorphism
        s.draw();         // Output: Drawing Circle

        s = new Square(); // Polymorphism
        s.draw();         // Output: Drawing Square
    }
}

---------------------------------------------------------------------------
| Feature                | Overloading       | Overriding                 |
| ---------------------- | ----------------- | -------------------------- |
| Class Level            | Same class        | Parent-child (inheritance) |
| Method Signature       | Must be different | Must be same               |
| Polymorphism Type      | Compile-time      | Runtime                    |
| Access Modifier Change | Allowed           | Cannot reduce visibility   |
---------------------------------------------------------------------------

